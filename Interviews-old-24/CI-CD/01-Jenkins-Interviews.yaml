Jenkins Interview Questions:
# Deekshith N GitHub

What is Jenkins:
1: Jenkins is a set of automated process that define the continuous delivery and continuous integration of your software
2: Jenkins Pipeline is a suite of plugins that support implementing and integrating pipeline jobs into jenkins
3: Pipeline can be defined using either declarative or scripted

Jenkins Advantages:
1: Version Control
2: Reusability
3: Parallel Execution
4: Visualization
5: Shared Libraries
6: Secrets Management
7: Multiple Agents
8: Open Source
9: Multi-Branch

What is Jenkinsfile:
it is also called as pipeline as a code
a File where we write all our declarative pipelines

What is Multi-Branch Pipeline:
1: Create a Multi-Branch pipeline in jenkins ui

Automatic Branch Detection
Automatic Job Creation
Isolation of Builds
Dynamic and Scalable
Configuration in Jenkinsfile

Advantages:
1: Automatic Branch Management
2: Continuous Integration
3: Isolation
4: Visibility

Troubleshoot Failed Build:
1: Check The logs (Check The console Output)
2: Check the issues from the bottom

What are Default Variables:
Default Variables:
1: $JOB_NAME
2: $NODE_NAME
3: $WORKSPACE
4: $BUILD_URL
5: $JENKINS_URL
6: $BUILD_ID

How to Store Secrets in Jenkins:
using Hashi-Corp Vault
using global variables
using credentials sections
secret file
secret text
github app
username with password
ssh with private key etc...

What are the ways to secure sensitive information:
1: Credentials Sections
2: Environmental Variables
3: Hashi-Corp Vault


What Is Shift left In DevOps:
1: Checking the bugs and code and reporting once every day after completing the continuous integration Is completed

Shared Library Types:
Jenkins Shared Libraries:
A simple Change you want to do in 100 projects
Keeping Pipelines Centrally,Jenkins Shared Libraries
Call Them from any no of Projects

1: Vars: Directory is a special directory where you can define global variables or functions that are accessible in pipeline scripts without explicitly importing them

your-shared-library/
|-- vars/
|   |-- yourFunction.groovy
|   |-- anotherFunction.groovy

# yourFunction.groovy
def call() {
    echo 'Hello from yourFunction!'
}

# Calling Library:
@Library('your-shared-library') _
yourFunction()

2: Resources:
"Resources" might refer to external files or data that your shared library uses. These can include configuration files, properties files, or any other non-code resources.

3: Handlers:
"Handlers" could refer to functions or classes within your shared library that handle specific tasks or actions. These could be action-specific functions that are reused across different parts of your shared library.

Why will you use Docker images as Agents:
1: Because for every agent we need to Install  environments to run specific applications or maven environment etc.. Hence we can use directly Node Image and Open Jdk  image if we use Docker as agent
2: No need to terminate the instance once our work is done
3: No need manual intervention

What Tools You Have worked on:
Maven,Node,Python
Explain Your Project:
Tech Stack of Project: Java,JavaScript,Python,Go-Lang
Walk Me through the pipelines:
Git Rebase VS Git Merge:

Git Rebase:
Produces a linear commit history, but may rewrite commit IDs and alter the order of commits.
linear Commit History
Original Commit ids may Change

Git Merge:
Retains a clear and linear commit history, showing all the commits from both branches.

Both Work the same functionality like merging the branches
But rebase will change the commit ids from where we have created the branch and Move the commit id and arrange it sequence
git merge will merge everything even commit ids also

Branching Strategies:
1: Features
2: Main
3: Hot Fix
3: Staging

File Create Maven:
Jar File
JaCoCo: Java Code Coverage

How to Set jenkins build to fail based specific word in console output:
pipeline{
    agent{
        docker{
            image 'openjdk:11'
        }
    }
    stages{
        stage("build"){
            sh 'chmod +x gradlew'
            sh './gradlew build | tee output.log'

        }
        stage("Check") {
            sh '! grep "task" output.log'
        }
    }
}

Can you provide an example of a time when you troubleshooted and optimized a CICD pipeline? What steps did you take and what was the outcome:

1: Issue : The pipeline has slow build process

What are all files required for NodeJs Image Build:
Index.js
Package.json
and web files

In index.js we configure port number
in package.json file we define what file should run

What are Active and Reactive parameters or Dynamic Parameters in Jenkins:
we can use build with parameters section in jenkins pipeline
based on the one dropdown another dropdown will get changed in build with parameters section it is called Active and Reactive parameters
1: Manage Jenkins
2: Active Choices plugin
3: Click Configure
4: Add Parameters
5: Select Active Choice Parameters
6: Groovy Script - return['Production','QA','Development']
7: Add Reactive Choice Parameters
8: if(env.equals('Production')) {
    return['Prod1']
    else if(env.equals('QA')){
        return['QA1','QA2']
    }
    else if(env.equals["Development"]){
        return['Dev1','Dev2']
    }
    else {
        return ['Select a Server From DropDown']
    }
}
9: referenced parameter : env

How to Customize the build number display to something else in jenkins job page:
Using env Variables in Jenkins we can customize
env variable--> Current Build --> Display Name
currentBuild.displayName="Final Demo # "+ currentBuild.Number

What are Multi Branch Pipeline:
There are Multiple Branches n One organization for one application we create a jenkins file for each file and configure it to Jenkins multi branch pipeline then automatically creates a job for each branch if Jenkins file is not present it will skip that branch

What are Shared Libraries:
when some lines of code is repeated all the pipelines/jenkins file for multiple pipelines we can centralize that line of code into shared libraries Refer when it is required

1: Configure Systems
2: Global Shared Libraries
3: Give the git where Library is present
4: def call()
5: @Library('Shared Library Name')

Resources:
Handlers:
Vars:
def call('')
@Library('Library Name')

What Type of Jenkins File you worked on:
1: FreeStyle
2: Pipeline --> Declarative,Scriptive

In Master Slave Setup:
agent{label 'my-label'}

Importance of Secrets:
Global Credentials
Secret text

How to take Backup Jenkins:
Thin Back Plugin
Cron Tab /Shell Script

What is Post Section:
Cleaning the Workspace
Mailing the user based on results
Always fail
always success
changed
aborted
scripted

Can we have job for Pull Request and once merge is done the source branch should be deleted :

Difference Between FreeStyle and Pipeline

Most Common Plugins Used in Jenkins:
Maven
Sonar Scanner
Nexus
Kubernetes
Dockers
Hashi-Corp Vault
Github
Git-Hooks
SSH Credentials
OWASP Dependency Plugin
envinject
ssh-agent
cloudbees
pulish-over-ssh
ssh-server
rebuilder
github webhook
Active Choices Plugin



How to distribute jenkins pipeline using jenkins
Using Agents Sections in that Node Section

What is Agent:
Agent Is a Machine where our jobs can run
we can use same jenkins server as a agent

How to do parameters in jenkins:
1: there is parameters sections
2: There are different parameters
    1: Password
    2: String
    3: Boolean
    4: text
    5: Choice

What is artifactory :
Parallel Stages in jenkins pipeline:
For Testing on multiple OS systems we will use Parallel Sections/Block
1: One will run in windows agent
2: Another will run on Linux Systems

Indent rainbow Extensions
Jenkinsfile:
pipeline {
    agent none
    agent any
    agent { label 'my-defined-label' }
    agent { node { label 'my-defined-label'} }
    agent {
        docker {
            image 'maven:3.9.3-eclipse'
            label 'my-defined-label'
            args '-v /tmp:/tmp'
        }
    }
    agent {
        docker {
            image 'myregistry.com/node'
            label 'my-defined-label'
            registryUrl 'https://myregistry.com/'
            registryCredentialsId 'myPredefinedCredentialsInJenkins'
        }
    }
    options {

    }
    tools{
        jdk 'jdk'
        nodejs 'nodejs'
    }

    stages {
        stage('Run Tests') {
            parallel {
                stage('Test On Windows') {
                    agent {
                        label "windows"
                    }
                    steps {
                        bat "run-tests.bat"
                    }
                    post {
                        always {
                            junit "**/TEST-*.xml"
                        }
                    }
                }
                stage('Test On Linux') {
                    agent {
                        label "linux"
                    }
                    steps {
                        sh "run-tests.sh"
                    }
                    post {
                        always {
                            junit "**/TEST-*.xml"
                        }
                    }
                }
            }
        }
    }
}


#### Issues In Jenkins:

1: OutOfMemoryError: Your Jenkins may encounter out of memory issue due to installing heavy plugins etc..
2: One time we got issue with out of memory when we created the machine with less memory then the jobs got not executed due to java

cmd ["java", "-Xmx2048m", "-Xms512m", "-jar", "jenkins.war"]

Xmx == Maximum heap size 2048m
Xms == Initial Heap size 512m

Java Can take more memory when we are not building the application based on variable and objects class will not take memory




